#!/bin/sh

# dependencies: grep sed curl video_player
# video_player ( needs to be able to play urls )
player_fn="mpv"

prog=$0
logfile="${XDG_CACHE_HOME:-$HOME/.cache}/ani-hsts"
base_url=$(curl -s -L -o /dev/null -w "%{url_effective}\n" https://gogoanime.cm)

c_red="\033[1;31m"
c_green="\033[1;32m"
c_yellow="\033[1;33m"
c_blue="\033[1;34m"
c_magenta="\033[1;35m"
c_cyan="\033[1;36m"
c_reset="\033[0m"


help_text () {
	while IFS= read -r line; do
		printf "%s\n" "$line"
	done <<-EOF
  
	Usage:
	  $prog [-kv] [--dub] [-q <quality>] [-d | -p <download_dir>] [<query>]
	  $prog [-kv] [--dub] [-q <quality>] -u | -n | -H
	  $prog -h | -D
	Options:
	  -u shows anime from history with unwatched episodes
	  -n show recent anime
	  -h show helptext
	  -d download episode
	  -p download episode to specified directory
	  -H continue with next unwatched episode from history of watched series
	  -D delete history
	  -q set video quality (high|normal|low) (default:normal)
	  -k on keypress navigation (previous/next/replay/quit episode)
	  --dub play the dub version if present
	  -v use VLC as the media player
	  -U fetch update from github
	Episode selection:
	  Add 'h' on beginning for episodes like '6.5' -> 'h6'
	  Multiple episodes can be chosen given a range
	    Choose episode [1-13]: 1 6
	    This would choose episodes 1 2 3 4 5 6
	EOF
}


die () {
	printf "$c_red%s$c_reset\n" "$*" >&2
	exit 1
}

err () {
	printf "$c_red%s$c_reset\n" "$*" >&2
}

update_script () {
	# get the newest version of this script from github and replace it
	update="$(curl -s "https://raw.githubusercontent.com/pystardust/ani-cli/master/ani-cli" | diff -u "$0" -)"
	if [ -z "$update" ]; then
		printf "$c_green%s$c_reset\n" "Script is up to date :)"
	else
		printf '%s\n' "$update" | patch "$0" -
		printf "$c_green%s$c_reset\n" "Script has been updated"
	fi
}

search_new () {
	# get anime name along with its id

	curl -s "$base_url" |
	sed -n -E '
		s_^[[:space:]]*<a href="/([^"/.]*)" title="([^"]*)".*_\1_p
		' |
	sed -n -E '
		s_^[[:space:]]*([^"]*)-episode-[0-9]{1,100}*_\1_p
		'
}

search_anime () {
	# get anime name along with its id
	search=$(printf '%s' "$1" | tr ' ' '-' )

	curl -s "$base_url//search.html" \
		-G \
		-d "keyword=$search" |
	sed -n -E '
		s_^[[:space:]]*<a href="/category/([^"]*)" title="([^"]*)".*_\1_p
		'
}

search_eps () {
	# get available episodes for anime_id
	anime_id=$1

	curl -s "$base_url/category/$anime_id" |
	sed -n -E '
		/^[[:space:]]*<a href="#" class="active" ep_start/{
		s/.* '\''([0-9]*)'\'' ep_end = '\''([0-9]*)'\''.*/\2/p
		q
		}
		'
}

get_dpage_link() {
	# get the download page url
	anime_id=$1
	ep_no=$2

	# credits to fork: https://github.com/Dink4n/ani-cli for the fix
	# dub prefix takes the value "-dub" when dub is needed else is empty
	anime_page=$(curl -s "$base_url/$anime_id${dub_prefix}-$ep_no")

	if printf '%s' "$anime_page" | grep -q "404" ; then
		anime_page=$(curl -s "$base_url/$anime_id${dub_prefix}-episode-$ep_no")
	fi

	printf '%s' "$anime_page" |
	sed -n -E '
		/^[[:space:]]*<li class="dowloads">/{
		s/.*href="([^"]*)".*/\1/p
		q
		}'
}

get_video_quality() {
	dpage_url="$1"

	video_links=$(curl -s "$sb_url" | sed -n -E 's/.*a href="#" onclick="download_video([^"]*)".*/\1/p' | head -1)
	
	m=$(printf "$quality" | cut -c1)
	i=$(printf "$video_links" | cut -d\' -f2)
	h=$(printf "$video_links" | cut -d\' -f6)
	video_link=$(curl -s "https://sbplay2.com/dl?op=download_orig&id=$i&mode=$m&hash=$h" | sed -n -E 's/<a href="([^"]*.mp4)".*/\1/p')
	if [ -z "$video_link" ]; then 
	    err "$quality quality doesn't exist, falling back to normal quality"
	    video_link=$(curl -s "https://sbplay2.com/dl?op=download_orig&id=$i&mode=n&hash=$h" | sed -n -E 's/<a href="([^"]*.mp4)".*/\1/p')
	fi
	printf '%s' "$video_link"
}

get_links () {
	dpage_url="$1"
	sb_url=$(curl -s "$dpage_url" |
	    sed -n -E 's/^[[:space:]]*href="([^"]*)".*/\1/p' | grep -oE ".*sbplay.*")

	video_url=$(get_video_quality "$sb_url")

	printf '%s' "$video_url"
}

dep_ch () {
	for dep; do
		if ! command -v "$dep" >/dev/null ; then
			die "Program \"$dep\" not found. Please install it."
		fi
	done
}

# get query
get_search_query () {
	if [ -z "$*" ]; then
		printf "Search Anime: "
		read -r query
	else
		query=$*
	fi
}

# create history file
[ -f "$logfile" ] || : > "$logfile"

#####################
## Anime selection ##
#####################

anime_selection () {
	search_results=$*
	menu_format_string='[%d] %s\n'
	menu_format_string_c1="$c_blue[$c_cyan%d$c_blue] $c_reset%s\n"
	menu_format_string_c2="$c_blue[$c_cyan%d$c_blue] $c_yellow%s$c_reset\n"

	count=1
	while read -r anime_id; do
		# alternating colors for menu
		[ $((count % 2)) -eq 0 ] &&
			menu_format_string=$menu_format_string_c1 ||
			menu_format_string=$menu_format_string_c2

		printf "$menu_format_string" "$count" "$anime_id"
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	# User input
	printf "$c_blue%s$c_green" "Enter number: "
	read -r choice
	printf "$c_reset"

	# Check if input is a number
	[ "$choice" -eq "$choice" ] 2>/dev/null || die "Invalid number entered"

	# Select respective anime_id
	count=1
	while read -r anime_id; do
		if [ "$count" -eq "$choice" ]; then
			selection_id=$anime_id
			break
		fi
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	[ -z "$selection_id" ] && die "Invalid number entered"

	read -r last_ep_number <<-EOF
	$(search_eps "$selection_id")
	EOF
}

search_for_unwatched () {
	search_results=$*

	unwatched_anime=""
	while read -r anime_id; do
		current_ep_number="$(search_eps "$anime_id")"
		history_ep_number="$(sed -n -E "s/${anime_id}\t//p" "$logfile")"
		if [ "$current_ep_number" -ge "$history_ep_number" ]
		then
			unwatched_anime="$unwatched_anime$anime_id\n"
		fi
	done <<-EOF
	$search_results
	EOF
	[ -z "$unwatched_anime" ] && die "No unwatched episodes"
	printf "%s""$unwatched_anime"
}

##################
## Ep selection ##
##################

episode_selection () {
	ep_choice_start="1"
	if [ "$last_ep_number" -gt 1 ]
	then
		[ "$is_download" -eq 1 ] &&
			printf "Range of episodes can be specified: start_number end_number\n"

		printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset$c_green: " "$last_ep_number"
		read -r ep_choice_start ep_choice_end
		if [ "$(echo "$ep_choice_start" | cut -c1-1)" = "h" ]
		then
			half_ep=1
			ep_choice_start=$(echo "$ep_choice_start" | cut -c2-)
		fi
		printf "$c_reset"
	fi
}

check_input() {
	[ "$ep_choice_start" -eq "$ep_choice_start" ] 2>/dev/null || die "Invalid number entered"
	episodes=$ep_choice_start
	if [ -n "$ep_choice_end" ]; then
		[ "$ep_choice_end" -eq "$ep_choice_end" ] 2>/dev/null || die "Invalid number entered"
		# create list of episodes to download/watch
		episodes=$(seq "$ep_choice_start" "$ep_choice_end")
	fi
}

append_history () {
	grep -q -w "${selection_id}" "$logfile" ||
		printf "%s\t%d\n" "$selection_id" $((episode+1)) >> "$logfile"
}

open_selection() {
	for ep in $episodes
	do
		open_episode "$selection_id" "$ep"
	done
	episode=${ep_choice_end:-$ep_choice_start}
}

open_episode () {
	anime_id=$1
	episode=$2
	# Cool way of clearing screen
	tput reset
	while [ "$episode" -lt 1 ] || [ "$episode" -gt "$last_ep_number" ]
	do

		if [ "$last_ep_number" -eq 0 ]; then
			die "Episodes not released yet!"
		else
			err "Episode out of range"
		fi
		printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " "$last_ep_number"
		read -r episode
		printf "$c_reset"
	done

	if [ "$half_ep" -eq 1 ]
	then
		temp_ep=$episode
		episode=$episode"-5"
	fi

	printf "Getting data for episode %s\n" "$episode"

	dpage_link=$(get_dpage_link "$anime_id" "$episode")
	video_url=$(get_links "$dpage_link")
	referer_link="https://sbplay2.com"

	if [ "$half_ep" -eq 1 ]
	then
		episode=$temp_ep
		half_ep=0
	fi

	if [ "$is_download" -eq 0 ]; then
		# write anime and episode number and save to temporary history
		sed -E "
			s/^${selection_id}\t[0-9]+/${selection_id}\t$((episode+1))/
		" "$logfile" > "${logfile}.new"
		printf "%s\n" "$video_url"

		kill "$PID" >/dev/null 2>&1
		case $player_fn in
			"mpv")
				nohup "$player_fn" --http-header-fields="Referer:$referer_link" "$video_url" > /dev/null 2>&1 &
				;;
			"vlc")
				nohup "$player_fn" --http-referrer="$referer_link" "$video_url" > /dev/null 2>&1 &
				;;
			*)
				die "Unsupported player"
		esac
		PID=$!

		printf "${c_green}\nVideo playing"
		mv "${logfile}.new" "$logfile"
	else
		mkdir -p "$download_dir"
		printf "Downloading episode $episode ...\n"
		printf "%s\n" "$video_url"
		# add 0 padding to the episode name
		episode=$(printf "%03d" "$episode")
		{
			aria2c -x 16 -s 16 --referer="$referer_link" "$video_url" --dir="$download_dir" -o "${anime_id}-${episode}.mp4" --download-result=hide &&
				printf "${c_green}Downloaded episode: %s${c_reset}\n" "$episode" ||
				printf "${c_red}Download failed episode: %s , please retry or check your internet connection${c_reset}\n" "$episode"
		}
	fi
}

############
# Start Up #
############

# to clear the colors when exited using SIGINT
trap 'printf "$c_reset"; exit 1' INT HUP

# option parsing
is_download=0
half_ep=0
quality=normal
scrape=query
download_dir="."
navigation_type=0
# navigation_type 0 - confirm selection by pressing enter
# navigation_type 1 - no enter confirmation for selections

while getopts 'hdDHknp:q:uvU-:' OPT; do
	case $OPT in
		h)
			help_text
			exit 0
			;;
		d)
			is_download=1
			;;
		D)
			: > "$logfile"
			exit 0
			;;
		H)
			scrape=history
			;;
		k)
			navigation_type=1
			;;
		n)
			scrape=new
			;;
		p)
			is_download=1
			download_dir=$OPTARG
			;;
		q)
			quality=$OPTARG
			;;
		u)
			scrape=history_new
			;;
		v)
			player_fn="vlc"
			;;
		U)
			update_script
			exit 0
			;;
		-)
			case $OPTARG in
				dub)
					dub_prefix="-dub"
					;;
				*)
					help_text
					exit 1
					;;
			esac
			;;
		*)
			help_text
			exit 1
			;;
	esac
done

# check for main dependencies
dep_ch "curl" "sed" "grep" "git"

# check for optional dependencies
if [ "$is_download" -eq 0 ]; then
	dep_ch "$player_fn"
else
    if ! command -v aria2c > /dev/null ; then
	echo "command aria2c not found. Please install it"
	echo "To install aria2c, Type <your_package_manager> aria2"
	exit 1
    fi
fi

shift $((OPTIND - 1))

########
# main #
########


case $scrape in
	query)
		get_search_query "$*"
		search_results=$(search_anime "$query")
		[ -z "$search_results" ] && die "No search results found"
		anime_selection "$search_results"
		episode_selection
		;;
	history)
		search_results=$(sed -n -E 's/\t[0-9]*//p' "$logfile")
		[ -z "$search_results" ] && die "History is empty"
		anime_selection "$search_results"
		ep_choice_start=$(sed -n -E "s/${selection_id}\t//p" "$logfile")
		;;
	new)
		search_results=$(search_new)
		# echo "$search_results"
		anime_selection "$search_results"
		episode_selection
		;;
	history_new)
		search_results=$(sed -n -E 's/\t[0-9]*//p' "$logfile")
		[ -z "$search_results" ] && die "History is empty"
		search_results=$(search_for_unwatched "$search_results")
		anime_selection "$search_results"
		ep_choice_start=$(sed -n -E "s/${selection_id}\t//p" "$logfile")
		;;
	*)
		die "Unexpected Scrape type"
esac

check_input
append_history
open_selection

while :; do
	printf "\n${c_green}Currently playing %s episode ${c_cyan}%d/%d\n" "$selection_id" "$episode" "$last_ep_number"
	if [ "$episode" -ne "$last_ep_number" ]; then
		printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "n" "next episode"
	fi
	if [ "$episode" -ne "1" ]; then
		printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "p" "previous episode"
	fi
	if [ "$last_ep_number" -ne "1" ]; then
		printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "s" "select episode"
	fi
	printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "r" "replay current episode"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_yellow%s$c_reset\n" "a" "search for another anime"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_magenta%s$c_reset\n" "h" "search history"
	printf "$c_blue[${c_cyan}%s$c_blue] $c_red%s$c_reset\n" "q" "exit"
	printf "${c_blue}Enter choice:${c_green} "

	case "${navigation_type}" in
		0)
			read -r choice
			;;
		1)
			stty_original="$(stty -g)"
			stty cbreak
			choice="$(dd bs=1 count=1 2> /dev/null)"
			stty "${stty_original}"
			;;
		*)
			die "navigation_type is invalid"
			;;

	esac

	printf "$c_reset"
	case $choice in
		n)
			episode=$((episode + 1))
			;;
		p)
			episode=$((episode - 1))
			;;

		s)	printf "${c_blue}Choose episode $c_cyan[1-%d]$c_reset:$c_green " "$last_ep_number"
			read -r episode
			if [ "$(echo "$episode" | cut -c1-1)" = "h" ]
			then
				half_ep=1
				episode=$(echo "$episode" | cut -c2-)
			fi
			printf "$c_reset"
			[ "$episode" -eq "$episode" ] 2>/dev/null || die "Invalid number entered"
			;;

		r)
			episode=$((episode))
			;;
		a)
			tput reset
			get_search_query ""
			search_results=$(search_anime "$query")
			[ -z "$search_results" ] && die "No search results found"
			anime_selection "$search_results"
			episode_selection
			check_input
			append_history
			open_selection
			continue
			;;
		h)
			tput reset
			search_results=$(sed -n -E 's/\t[0-9]*//p' "$logfile")
			[ -z "$search_results" ] && die "History is empty"
			anime_selection "$search_results"
			ep_choice_start=$(sed -n -E "s/${selection_id}\t//p" "$logfile")
			check_input
			append_history
			open_selection
			continue
			;;

		q)
			break;;

		*)
			die "invalid choice"
			;;
	esac

	open_episode "$selection_id" "$episode"
done
